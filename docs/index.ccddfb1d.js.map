{"mappings":"MACMA,cACSC,EAAKC,EAAKC,EAAKC,GAsB1B,OArBAC,KAAKJ,IAAMA,EACXI,KAAKC,KAAOJ,EAAII,KAChBD,KAAKE,KAAON,EAAIO,GAChBH,KAAKI,IAAMP,EAAIO,IACfJ,KAAKK,SAAWT,EAAIU,UAAU,GAC9BN,KAAKM,UAAYV,EAAIU,UACrBN,KAAKO,KAAOV,EAAIU,KAChBP,KAAKQ,MAAQC,SAASC,eAAeV,KAAKC,MAC1CD,KAAKW,gBAAaC,EAClBZ,KAAKa,SAAU,EACfb,KAAKc,MAAQjB,EAAIiB,MAEjBd,KAAKe,OAASlB,EAAIkB,OAElBf,KAAKgB,KAAKlB,GAGVE,KAAKW,WAAWM,OAAS,WACvBlB,KAGKC,KAGTgB,KAAMlB,GACJ,MAAMoB,EAAWpB,EAAIqB,KACfC,EAAatB,EAAIuB,OACjBb,EAAQR,KAAKQ,MAGnBU,EAASI,UAAUd,EAAO,EAAG,EAAGA,EAAMe,MAAOf,EAAMgB,QAEnD,MAAMC,EAAiBP,EAASQ,aAAa,EAAG,EAAGlB,EAAMe,MAAOf,EAAMgB,QAChEG,EAAOF,EAAeE,KAGtBC,EAAQ5B,KAAKJ,IAAIgC,MACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,GAAQ,EACvCF,EAAKE,GAAKD,EAAMG,IAChBJ,EAAKE,EAAI,GAAKD,EAAMI,MACpBL,EAAKE,EAAI,GAAKD,EAAMK,KAItBf,EAASgB,UAAU,EAAG,EAAGpC,EAAIqC,KAAKC,EAAGtC,EAAIqC,KAAKE,GAC9CnB,EAASoB,aAAab,EAAgB,EAAG,GAGzCzB,KAAKW,WAAa,IAAI4B,MACtBvC,KAAKW,WAAW6B,IAAMpB,EAAWqB,UAAU,aAG3CvB,EAASgB,UAAU,EAAG,EAAGpC,EAAIqC,KAAKC,EAAGtC,EAAIqC,KAAKE,GAGhDK,OAAQC,IACgC,IAAlC3C,KAAKO,KAAKqC,QAAQD,GACpB3C,KAAKa,SAAU,EAEfb,KAAKa,SAAU,EAEC,UAAdb,KAAKC,OACPD,KAAKa,SAAU,GAInBgC,KAAMC,EAAQC,IACS,IAAjB/C,KAAKa,UACHb,KAAKc,QACPgC,EAAOE,aAAe,IAAMhD,KAAKc,OAAS,KAG5CgC,EAAOxB,UACLtB,KAAKQ,MACLR,KAAKK,SAAS+B,EAAIpC,KAAKe,OAAOqB,EAC9BpC,KAAKK,SAASgC,EAAIrC,KAAKe,OAAOsB,GAGhCS,EAAOE,YAAc,EAErBD,EAAMzB,UACJtB,KAAKW,WACLX,KAAKK,SAAS+B,EAAIpC,KAAKe,OAAOqB,EAC9BpC,KAAKK,SAASgC,EAAIrC,KAAKe,OAAOsB,WCtFhCY,cACSrD,GAMX,OALAI,KAAK2C,WAAa,EAClB3C,KAAKM,UAAYV,EAAIU,UACrBN,KAAKK,SAAWT,EAAIU,UAAUN,KAAK2C,YACnC3C,KAAKkD,KAAOtD,EAAIsD,KAETlD,KAGT0C,OAAQC,GACN,IAAK,IAAIQ,EAAI,EAAGA,EAAInD,KAAKkD,KAAKpB,OAAQqB,IACpCnD,KAAKkD,KAAKC,GAAGR,WAAaA,EAC1B3C,KAAKkD,KAAKC,GAAG9C,SAAWL,KAAKM,UAAUqC,GACvC3C,KAAKkD,KAAKC,GAAGT,OAAOC,GAIxBS,YAAatD,EAAKsC,EAAGC,GACnBrC,KAAKM,UAAUR,GAAKsC,EAAIA,EACxBpC,KAAKM,UAAUR,GAAKuC,EAAIA,SCjBtBgB,cACSC,EAAUvD,GAErBC,KAAKmC,KAAO,CAAEC,EAAGkB,EAASC,YAAY,GAAIlB,EAAGiB,EAASC,YAAY,IAG/C9C,SAASC,eAAe,cAChC8C,MAAMC,WAAaH,EAASI,OAGvC,MAAMC,EAAWlD,SAASC,eAAe,YAsBzC,OArBAiD,EAASH,MAAMjC,MAAQvB,KAAKmC,KAAKC,EAAI,KACrCuB,EAASH,MAAMhC,OAASxB,KAAKmC,KAAKE,EAAI,KACtCsB,EAASH,MAAMC,WAAaH,EAASG,WAGrCzD,KAAK4D,aAAa5D,KAAKmC,MAGvBnC,KAAK2C,WAAa,EAGlB3C,KAAK6D,KAAO,GACZ7D,KAAKkD,KAAO,GACZlD,KAAK8D,SAAW,GAChB9D,KAAKgB,KAAKsC,EAASO,KAAMP,EAASJ,KAAMnD,YA4JpBgE,GAEtB,MAAMxD,EAAOE,SAASuD,qBAAqB,KAC3C,IAAK,IAAIb,EAAI,EAAGA,EAAI5C,EAAKuB,OAAQqB,IAE/B5C,EAAK4C,GAAGc,iBAAiB,SAAS,WAChC,MAAMC,EAASC,SAASnE,KAAKoE,WAC7BL,EAAKrB,OAAOwB,GACZH,EAAKlB,OACLwB,EAAWN,EAAKpB,eApKlB2B,CAActE,MAGdA,KAAK0C,SACL1C,KAAK6C,OAEE7C,KAGTgB,KAAM6C,EAAMX,EAAMnD,GAQhB,MAAMwE,EAAU,SAAUC,EAAQ3E,GAChC,MAAM4E,GAAaD,EAAOE,QACpBC,EAAcH,EAAOvE,OAASJ,EAAII,KAClC2E,EAAaJ,EAAOK,UAAYhF,EAAIgF,QAC1C,OAAOJ,GAAaE,GAAeC,GAOrC,IAAI7C,EAAM,EACNE,EAAO,EACPD,EAAQ,EAEZ,IAAK,IAAImB,EAAI,EAAGA,EAAIU,EAAK/B,OAAQqB,IAAK,CAIhCA,EAAI,IACNpB,EAAMoB,EACGA,EAAI,KAAOA,EAAI,KACxBpB,EAAM,EACNC,EAAQmB,GACCA,EAAI,KAAWA,EAAI,MAC5BnB,EAAQ,EACRC,EAAOkB,GAGT,MAAM2B,EAAU/C,EAAMC,EAAQC,EAAO,IACrCjC,KAAK8D,SAASgB,GAAW3B,EACzBU,EAAKV,GAAGvB,MAAQ,CAAEG,IAAKA,EAAKC,MAAOA,EAAOC,KAAMA,EAAMnB,MAAO,KAG7D,MAAMiE,EAAUlB,EAAKV,GAAGD,KAExB,IAAK,IAAI8B,EAAI,EAAGA,EAAID,EAAQjD,OAAQkD,IAClC,IAAK,IAAInD,EAAI,EAAGA,EAAIqB,EAAKpB,OAAQD,IAQ3B0C,EAAQQ,EAAQC,GAAI9B,EAAKrB,GAAI7B,KAAKkD,KAAKrB,MACrC7B,KAAKkD,KAAKrB,IAAM7B,KAAKkD,KAAKrB,GAAGjC,IAC/BqF,QAAQC,IAAI,oBAEZH,EAAQC,GAAK,IAAIrF,EAAQkE,EAAKV,GAAID,EAAKrB,GAAI7B,KAAMD,GACjDC,KAAKkD,KAAKrB,GAAKkD,EAAQC,GACvBD,EAAQC,GAAGN,SAAU,IAM7B1E,KAAK6D,KAAKV,GAAK,IAAIF,EAAWY,EAAKV,IAIrCnD,KAAKkD,KAAKiC,UAGZvB,aAAczB,GACZ,MAAMf,EAAaX,SAASC,eAAe,UACrCQ,EAAWE,EAAWgE,WAAW,MACvChE,EAAWoC,MAAMjC,MAAQY,EAAKC,EAAI,KAClChB,EAAWoC,MAAMhC,OAASW,EAAKE,EAAI,KACnCjB,EAAWG,MAAQY,EAAKC,EACxBhB,EAAWI,OAASW,EAAKE,EAEzB,MAAMgD,EAAc5E,SAASC,eAAe,SACtC4E,EAAYD,EAAYD,WAAW,MACzCC,EAAY7B,MAAMjC,MAAQY,EAAKC,EAAI,KACnCiD,EAAY7B,MAAMhC,OAASW,EAAKE,EAAI,KACpCgD,EAAY9D,MAAQY,EAAKC,EACzBiD,EAAY7D,OAASW,EAAKE,EAC1BgD,EAAY7B,MAAMC,WAAa,OAC/B4B,EAAY7B,MAAM+B,QAAU,OAE5BvF,KAAKmB,KAAOD,EACZlB,KAAKqB,OAASD,EACdpB,KAAK+C,MAAQuC,EAGfE,kBAAmBC,GACjB,MACM9D,EADQ3B,KAAK+C,MAAMrB,aAAa+D,EAAIrD,EAAGqD,EAAIpD,EAAG,EAAG,GACpCV,KACbmD,EAAUnD,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAK,IAG9C,GAAc,IAFAA,EAAK,GAGjBsD,QAAQC,IAAI,qBACP,CACL,MAAMQ,EAAW1F,KAAK8D,SAASgB,GACzBlF,EAAMI,KAAK6D,KAAK6B,GACtB,GAAI9F,GAAOA,EAAIsD,KAAK,GAAG9C,IAAM,EAC3B,OAAOR,GAKb+F,kBAAmB/F,GACjB,MAAO,CACLwC,EAAGxC,EAAIU,UAAUN,KAAK2C,YAAYP,EAClCC,EAAGzC,EAAIU,UAAUN,KAAK2C,YAAYN,GAItCuD,WAAYhG,EAAKwC,EAAGC,GAClBzC,EAAIwD,YAAYpD,KAAK2C,WAAYP,EAAGC,GAEpCrC,KAAK0C,SACL1C,KAAK6C,OAGPH,OAAQwB,GAEFA,IAAUlE,KAAK2C,WAAauB,GAGhC,IAAK,IAAIf,EAAI,EAAGA,EAAInD,KAAK6D,KAAK/B,OAAQqB,IACpCnD,KAAK6D,KAAKV,GAAGT,OAAO1C,KAAK2C,YAI7BE,OACE7C,KAAKmB,KAAKe,UAAU,EAAG,EAAGlC,KAAKmC,KAAKC,EAAGpC,KAAKmC,KAAKE,GACjDrC,KAAK+C,MAAMb,UAAU,EAAG,EAAGlC,KAAKmC,KAAKC,EAAGpC,KAAKmC,KAAKE,GAClD,IAAK,IAAIc,EAAI,EAAGA,EAAInD,KAAKkD,KAAKpB,OAAQqB,IAChCnD,KAAKkD,KAAKC,IACZnD,KAAKkD,KAAKC,GAAGN,KAAK7C,KAAKmB,KAAMnB,KAAK+C,iBAoBjCsB,EAAY1B,GAEnB,MAAMpC,EAAOE,SAASuD,qBAAqB,KAC3C,IAAK,IAAIb,EAAI,EAAGA,EAAI5C,EAAKuB,OAAQqB,IAC3BR,IAAewB,SAAS5D,EAAK4C,GAAGiB,WAClC7D,EAAK4C,GAAGK,MAAM5B,MAAQ,QAEtBrB,EAAK4C,GAAGK,MAAM5B,MAAQ,aC5MtBiE,cACS9B,GACX/D,KAAK8F,aAAc,EACnB9F,KAAK+D,KAAOA,EACZ/D,KAAK8C,OAASrC,SAASC,eAAe,UACtC,MAAMW,EAASZ,SAASC,eAAe,SACvCV,KAAKmB,KAAOE,EAAO+D,WAAW,MAGhCW,aACEtF,SAASwD,iBAAiB,aAAc+B,GAAMhG,KAAKiG,YAAYD,KAC/DvF,SAASwD,iBAAiB,WAAS,KAC7BjE,KAAK8F,cACPrF,SAASyF,oBAAoB,YAAalG,KAAK8F,aAC/C9F,KAAK8F,aAAc,MAKzBG,YAAaE,GACX,MAAMV,EAAMzF,KAAKoG,YAAYD,GACvBvG,EAAMI,KAAK+D,KAAKyB,kBAAkBC,GACxC,GAAI7F,EAAK,CACP,MAAMyG,EAAYrG,KAAKsG,aAAa1G,EAAK6F,GACzCzF,KAAK8F,YAAeE,GAAMhG,KAAKuG,YAAYP,EAAGpG,EAAKyG,GACnD5F,SAASwD,iBAAiB,YAAajE,KAAK8F,aAC5CK,EAAEK,kBAINF,aAAc1G,EAAK6F,GACjB,MAAMgB,EAAiBzG,KAAK+D,KAAK4B,kBAAkB/F,GACnD,MAAO,CACLwC,EAAGqE,EAAerE,EAAIqD,EAAIrD,EAC1BC,EAAGoE,EAAepE,EAAIoD,EAAIpD,GAI9BkE,YAAaP,EAAGpG,EAAKyG,GACnB,MAAMK,EAAuB1G,KAAKoG,YAAYJ,GACxC5D,EAAIiE,EAAUjE,EAAIsE,EAAqBtE,EACvCC,EAAIgE,EAAUhE,EAAIqE,EAAqBrE,EAE7CrC,KAAK+D,KAAK6B,WAAWhG,EAAKwC,EAAGC,GAE7B2D,EAAEQ,iBAIJJ,YAAaO,GACX,MAAMC,EAAO5G,KAAK8C,OAAO+D,wBACzB,MAAO,CACLzE,EAAGuE,EAAIG,QAAUF,EAAKG,KACtB1E,EAAGsE,EAAIK,QAAUJ,EAAKK,MCnD5BC,OAAOjD,iBAAiB,QAAQ,WAE9B,IAAIkD,EAAS,EACb,MAAMC,EAAYC,SAASnE,KAAKpB,OAC1BiC,EAAO,IAAIV,EAASgE,UAAQ,KAAUF,GAAU,KACtC,IAAItB,EAAY9B,GACxBgC,aAWRmB,OAAOI,qBATEC,IACHJ,EAASC,GACXnC,QAAQC,IAAG,WAAYiC,QAAaC,KACpCF,OAAOI,WAAWC,EAAa,MAE/BxD,EAAKlB,SAIsB","sources":["javascript/kissCel.js","javascript/kissObject.js","javascript/kissDoll.js","javascript/dragAndDrop.js","javascript/doll.js"],"sourcesContent":["\nclass KiSSCel {\n  constructor (obj, cel, set, incLoaded) {\n    this.obj = obj\n    this.name = cel.name\n    this.mark = obj.id\n    this.fix = cel.fix\n    this.position = obj.positions[0]\n    this.positions = obj.positions\n    this.sets = cel.sets\n    this.image = document.getElementById(this.name)\n    this.ghostImage = undefined\n    this.visible = false\n    this.alpha = cel.alpha\n\n    this.offset = cel.offset\n\n    this.init(set)\n\n    // Let Smooch know when image is loaded\n    this.ghostImage.onload = function () {\n      incLoaded()\n    }\n\n    return this\n  }\n\n  init (set) {\n    const drawctxt = set.ctxt\n    const drawcanvas = set.canvas\n    const image = this.image\n\n    // Draw image to ctxt and get image data\n    drawctxt.drawImage(image, 0, 0, image.width, image.height)\n\n    const ghostImageData = drawctxt.getImageData(0, 0, image.width, image.height)\n    const data = ghostImageData.data\n\n    // Fill ghost image data with obj color\n    const color = this.obj.color\n    for (let k = 0; k < data.length; k = k + 4) {\n      data[k] = color.red\n      data[k + 1] = color.green\n      data[k + 2] = color.blue\n    }\n\n    // Clear ctxt and draw altered image\n    drawctxt.clearRect(0, 0, set.size.x, set.size.y)\n    drawctxt.putImageData(ghostImageData, 0, 0)\n\n    // Save altered image as cel's ghost image\n    this.ghostImage = new Image()\n    this.ghostImage.src = drawcanvas.toDataURL('image/png')\n\n    // Clear ctxt\n    drawctxt.clearRect(0, 0, set.size.x, set.size.y)\n  }\n\n  update (currentSet) {\n    if (this.sets.indexOf(currentSet) === -1) {\n      this.visible = false\n    } else {\n      this.visible = true\n    }\n    if (this.name === 'blink') {\n      this.visible = false\n    }\n  }\n\n  draw (screen, ghost) {\n    if (this.visible === true) {\n      if (this.alpha) {\n        screen.globalAlpha = (255 - this.alpha) / 255\n      }\n\n      screen.drawImage(\n        this.image,\n        this.position.x + this.offset.x,\n        this.position.y + this.offset.y\n      )\n\n      screen.globalAlpha = 1\n\n      ghost.drawImage(\n        this.ghostImage,\n        this.position.x + this.offset.x,\n        this.position.y + this.offset.y\n      )\n    }\n  }\n}\n\nexport { KiSSCel }\n","class KiSSObject {\n  constructor (obj) {\n    this.currentSet = 0\n    this.positions = obj.positions\n    this.position = obj.positions[this.currentSet]\n    this.cels = obj.cels\n\n    return this\n  }\n\n  update (currentSet) {\n    for (let i = 0; i < this.cels.length; i++) {\n      this.cels[i].currentSet = currentSet\n      this.cels[i].position = this.positions[currentSet]\n      this.cels[i].update(currentSet)\n    }\n  }\n\n  setPosition (set, x, y) {\n    this.positions[set].x = x\n    this.positions[set].y = y\n  }\n}\n\nexport { KiSSObject }\n","import { KiSSCel } from './kissCel'\nimport { KiSSObject } from './kissObject'\n\nclass KiSSDoll {\n  constructor (kissData, incLoaded) {\n    // Size of the play area.\n    this.size = { x: kissData.window_size[0], y: kissData.window_size[1] }\n\n    // Set up border area (around the playarea)\n    const borderarea = document.getElementById('borderarea')\n    borderarea.style.background = kissData.border\n\n    // Set up play area\n    const playarea = document.getElementById('playarea')\n    playarea.style.width = this.size.x + 'px'\n    playarea.style.height = this.size.y + 'px'\n    playarea.style.background = kissData.background\n\n    // Set up canvases\n    this.initCanvases(this.size)\n\n    // Initialize current set\n    this.currentSet = 0\n\n    // Initialize objs and cels\n    this.objs = []\n    this.cels = []\n    this.colorids = []\n    this.init(kissData.objs, kissData.cels, incLoaded)\n    initSetClicks(this)\n\n    // Update and draw\n    this.update()\n    this.draw()\n\n    return this\n  }\n\n  init (objs, cels, incLoaded) {\n    /* Cels have to be kept in a separate list from the objects.\n            This is because objects are the things that have click handlers,\n            get dragged, change position, etc. But cels are the things that\n            are drawn, and they have to be drawn in a certain order to preserve\n            the layering effect. */\n\n    // Helper function for matching objects and cels\n    const matches = function (objCel, cel) {\n      const unmatched = !objCel.matched\n      const nameMatches = objCel.name === cel.name\n      const palMatches = objCel.palette === cel.palette\n      return unmatched && nameMatches && palMatches\n    }\n\n    /* Go through each KiSS object, add information from the object to the\n            cels within the object, then add those cels to the list. */\n\n    /* Set color id initial values */\n    let red = 0\n    let blue = 0\n    let green = 0\n\n    for (let i = 0; i < objs.length; i++) {\n      // create a unique color for each object\n      // and register it in the colorids array\n      // supports up to 255*3 objects\n      if (i < 255) {\n        red = i\n      } else if (i > 255 && i < 255 * 2) {\n        red = 0\n        green = i\n      } else if (i > 255 * 2 && i < 255 * 3) {\n        green = 0\n        blue = i\n      }\n\n      const colorid = red + green + blue + 255\n      this.colorids[colorid] = i\n      objs[i].color = { red: red, green: green, blue: blue, alpha: 255 }\n\n      // now lets go through the cels\n      const objCels = objs[i].cels\n      // for each cel in the obj, find that cel in the celData list\n      for (let j = 0; j < objCels.length; j++) {\n        for (let k = 0; k < cels.length; k++) {\n          // The only way we can match cels is by name.\n          // If multiple objects share the same cel, the cel list has\n          // multiple copies of the cel, and we skip cels that are already\n          // matched. This is hacky as hell.\n          // TODO: This is going to cause trouble if we have multiple cels with\n          // the same name, but they have different palettes applied.\n          // Could make sure that the palette of the object and the cel match\n          if (matches(objCels[j], cels[k], this.cels[k])) {\n            if (this.cels[k] && this.cels[k].obj) {\n              console.log('already matched')\n            } else {\n              objCels[j] = new KiSSCel(objs[i], cels[k], this, incLoaded)\n              this.cels[k] = objCels[j]\n              objCels[j].matched = true\n            }\n          }\n        }\n      }\n\n      this.objs[i] = new KiSSObject(objs[i])\n    }\n\n    // cels have to be drawn in reverse order (drawing lowest items first)\n    this.cels.reverse()\n  }\n\n  initCanvases (size) {\n    const drawcanvas = document.getElementById('screen')\n    const drawctxt = drawcanvas.getContext('2d')\n    drawcanvas.style.width = size.x + 'px'\n    drawcanvas.style.height = size.y + 'px'\n    drawcanvas.width = size.x\n    drawcanvas.height = size.y\n\n    const ghostcanvas = document.getElementById('ghost')\n    const ghostctxt = ghostcanvas.getContext('2d')\n    ghostcanvas.style.width = size.x + 'px'\n    ghostcanvas.style.height = size.y + 'px'\n    ghostcanvas.width = size.x\n    ghostcanvas.height = size.y\n    ghostcanvas.style.background = 'blue'\n    ghostcanvas.style.display = 'none'\n\n    this.ctxt = drawctxt\n    this.canvas = drawcanvas\n    this.ghost = ghostctxt\n  }\n\n  getSelectedObject (pos) {\n    const pixel = this.ghost.getImageData(pos.x, pos.y, 1, 1)\n    const data = pixel.data\n    const colorid = data[0] + data[1] + data[2] + 255\n    const alpha = data[3]\n\n    if (alpha === 0) {\n      console.log('not draggable')\n    } else {\n      const objIndex = this.colorids[colorid]\n      const obj = this.objs[objIndex]\n      if (obj && obj.cels[0].fix < 1) {\n        return obj\n      }\n    }\n  }\n\n  getObjectPosition (obj) {\n    return {\n      x: obj.positions[this.currentSet].x,\n      y: obj.positions[this.currentSet].y\n    }\n  }\n\n  moveObject (obj, x, y) {\n    obj.setPosition(this.currentSet, x, y)\n\n    this.update()\n    this.draw()\n  }\n\n  update (newSet) {\n    // Update current set if new set is given\n    if (newSet) { this.currentSet = newSet }\n\n    // Update cels\n    for (let i = 0; i < this.objs.length; i++) {\n      this.objs[i].update(this.currentSet)\n    }\n  }\n\n  draw () {\n    this.ctxt.clearRect(0, 0, this.size.x, this.size.y)\n    this.ghost.clearRect(0, 0, this.size.x, this.size.y)\n    for (let i = 0; i < this.cels.length; i++) {\n      if (this.cels[i]) {\n        this.cels[i].draw(this.ctxt, this.ghost)\n      }\n    }\n  }\n}\n\nfunction initSetClicks (doll) {\n  // Add click events to set numbers\n  const sets = document.getElementsByTagName('a')\n  for (let i = 0; i < sets.length; i++) {\n    // when a number is clicked, update doll to new set\n    sets[i].addEventListener('click', function () {\n      const newSet = parseInt(this.innerHTML)\n      doll.update(newSet)\n      doll.draw()\n      updateSets(doll.currentSet)\n    })\n  }\n}\n\nfunction updateSets (currentSet) {\n  // Update set listing to highlight current set\n  const sets = document.getElementsByTagName('a')\n  for (let i = 0; i < sets.length; i++) {\n    if (currentSet === parseInt(sets[i].innerHTML)) {\n      sets[i].style.color = 'black'\n    } else {\n      sets[i].style.color = 'grey'\n    }\n  }\n}\n\nexport { KiSSDoll }\n","\nclass DragAndDrop {\n  constructor (doll) {\n    this.dragHandler = false\n    this.doll = doll\n    this.screen = document.getElementById('screen')\n    const canvas = document.getElementById('ghost')\n    this.ctxt = canvas.getContext('2d')\n  }\n\n  initialize () {\n    document.addEventListener('mousedown', (e) => this.onMouseDown(e))\n    document.addEventListener('mouseup', () => {\n      if (this.dragHandler) {\n        document.removeEventListener('mousemove', this.dragHandler)\n        this.dragHandler = false\n      }\n    })\n  }\n\n  onMouseDown (e) {\n    const pos = this.getMousePos(e)\n    const obj = this.doll.getSelectedObject(pos)\n    if (obj) {\n      const dragStart = this.getDragStart(obj, pos)\n      this.dragHandler = (e) => this.onMouseMove(e, obj, dragStart)\n      document.addEventListener('mousemove', this.dragHandler)\n      e.preventDefault()\n    }\n  }\n\n  getDragStart (obj, pos) {\n    const objectPosition = this.doll.getObjectPosition(obj)\n    return {\n      x: objectPosition.x - pos.x,\n      y: objectPosition.y - pos.y\n    }\n  }\n\n  onMouseMove (e, obj, dragStart) {\n    const currentMousePosition = this.getMousePos(e)\n    const x = dragStart.x + currentMousePosition.x\n    const y = dragStart.y + currentMousePosition.y\n\n    this.doll.moveObject(obj, x, y)\n\n    e.preventDefault()\n  }\n\n  // from http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n  getMousePos (evt) {\n    const rect = this.screen.getBoundingClientRect()\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    }\n  }\n}\n\nexport { DragAndDrop }\n","import { KiSSDoll } from './kissDoll'\nimport { DragAndDrop } from './dragAndDrop'\n\nwindow.addEventListener('load', function () {\n  /* globals kissJson */\n  let loaded = 0\n  const totalCels = kissJson.cels.length\n  const doll = new KiSSDoll(kissJson, () => { loaded += 1 })\n  const dragger = new DragAndDrop(doll)\n  dragger.initialize()\n\n  function checkLoaded () {\n    if (loaded < totalCels) {\n      console.log(`loading ${loaded} of ${totalCels}`)\n      window.setTimeout(checkLoaded, 500)\n    } else {\n      doll.draw()\n    }\n  }\n\n  window.setTimeout(checkLoaded, 500)\n})\n"],"names":["$d7cb66b891d16539$export$fc4b60b88d5c7598","obj","cel","set","incLoaded","this","name","mark","id","fix","position","positions","sets","image","document","getElementById","ghostImage","undefined","visible","alpha","offset","init","onload","drawctxt","ctxt","drawcanvas","canvas","drawImage","width","height","ghostImageData","getImageData","data","color","k","length","red","green","blue","clearRect","size","x","y","putImageData","Image","src","toDataURL","update","currentSet","indexOf","draw","screen","ghost","globalAlpha","$048c9435de6bb329$export$c76ef8c1aa23eb5b","cels","i","setPosition","$e30bceaf9ca041da$export$92944dc530d5048e","kissData","window_size","style","background","border","playarea","initCanvases","objs","colorids","doll","getElementsByTagName","addEventListener","newSet","parseInt","innerHTML","$e30bceaf9ca041da$var$updateSets","$e30bceaf9ca041da$var$initSetClicks","matches","objCel","unmatched","matched","nameMatches","palMatches","palette","colorid","objCels","j","console","log","reverse","getContext","ghostcanvas","ghostctxt","display","getSelectedObject","pos","objIndex","getObjectPosition","moveObject","$a40f01e2974c8bb3$export$a4c936d95bae1613","dragHandler","initialize","e","onMouseDown","removeEventListener","e1","getMousePos","dragStart","getDragStart","onMouseMove","preventDefault","objectPosition","currentMousePosition","evt","rect","getBoundingClientRect","clientX","left","clientY","top","window","loaded","totalCels","kissJson","setTimeout","checkLoaded"],"version":3,"file":"index.ccddfb1d.js.map"}