{"mappings":"YAIMA,cACSC,EAAKC,EAAKC,EAAKC,GAuB1B,OAtBAC,KAAKC,MAAQL,EAAIK,MACjBD,KAAKE,KAAOL,EAAIK,KAChBF,KAAKG,KAAON,EAAIM,KAChBH,KAAKI,IAAMP,EAAIO,IACfJ,KAAKK,SAAWT,EAAIU,UAAU,GAC9BN,KAAKM,UAAYV,EAAIU,UACrBN,KAAKO,KAAOV,EAAIU,KAChBP,KAAKQ,MAAQC,SAASC,eAAeb,EAAIK,KAAO,IAAML,EAAIc,SAC1DX,KAAKY,gBAAaC,EAClBb,KAAKc,SAAU,EACfd,KAAKe,MAAQlB,EAAIkB,MACjBf,KAAKgB,WAAa,EAElBhB,KAAKiB,OAASpB,EAAIoB,OAElBjB,KAAKkB,KAAKpB,GAGVE,KAAKY,WAAWO,OAAS,WACvBpB,KAGKC,KAGTkB,KAAMpB,GACJ,MAAMsB,EAAWtB,EAAIuB,KACfC,EAAaxB,EAAIyB,OACjBf,EAAQR,KAAKQ,MAGnBY,EAASI,UAAUhB,EAAO,EAAG,EAAGA,EAAMiB,MAAOjB,EAAMkB,QAEnD,MAAMC,EAAiBP,EAASQ,aAAa,EAAG,EAAGpB,EAAMiB,MAAOjB,EAAMkB,QAChEG,EAAOF,EAAeE,KAGtB5B,WAuDS6B,GACjB,MAAMC,EAAM,4CAA+CC,KAAKF,GAChE,GAAIC,EACF,MAAO,CACLE,IAAKC,SAASH,EAAO,GAAI,IACzBI,MAAOD,SAASH,EAAO,GAAI,IAC3BK,KAAMF,SAASH,EAAO,GAAI,KA7DdM,CAASrC,KAAKC,OAC5B,IAAK,IAAIqC,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,GAAQ,EACvCT,EAAKS,GAAKrC,EAAMgC,IAChBJ,EAAKS,EAAI,GAAKrC,EAAMkC,MACpBN,EAAKS,EAAI,GAAKrC,EAAMmC,KAItBhB,EAASoB,UAAU,EAAG,EAAG1C,EAAI2C,KAAKC,EAAG5C,EAAI2C,KAAKE,GAC9CvB,EAASwB,aAAajB,EAAgB,EAAG,GAGzC3B,KAAKY,WAAa,IAAIiC,MACtB7C,KAAKY,WAAWkC,IAAMxB,EAAWyB,UAAU,aAG3C3B,EAASoB,UAAU,EAAG,EAAG1C,EAAI2C,KAAKC,EAAG5C,EAAI2C,KAAKE,GAGhDK,OAAQhC,GACNhB,KAAKgB,WAAaA,GACoB,IAAlChB,KAAKO,KAAK0C,QAAQjC,GACpBhB,KAAKc,SAAU,EAEfd,KAAKc,SAAU,EAEjBd,KAAKK,SAAWL,KAAKM,UAAUU,GACb,UAAdhB,KAAKE,OACPF,KAAKc,SAAU,GAInBoC,KAAMC,EAAQC,IACS,IAAjBpD,KAAKc,UACHd,KAAKe,QACPoC,EAAOE,aAAe,IAAMrD,KAAKe,OAAS,KAG5CoC,EAAO3B,UACLxB,KAAKQ,MACLR,KAAKK,SAASqC,EAAI1C,KAAKiB,OAAOyB,EAC9B1C,KAAKK,SAASsC,EAAI3C,KAAKiB,OAAO0B,GAGhCQ,EAAOE,YAAc,EAErBD,EAAM5B,UACJxB,KAAKY,WACLZ,KAAKK,SAASqC,EAAI1C,KAAKiB,OAAOyB,EAC9B1C,KAAKK,SAASsC,EAAI3C,KAAKiB,OAAO0B,WC5FhCW,cACSnD,EAAMF,EAAOK,GAOxB,OANAN,KAAKG,KAAOA,EACZH,KAAKgB,WAAa,EAClBhB,KAAKC,MAAQA,EACbD,KAAKM,UAAYA,EACjBN,KAAKuD,KAAO,GAELvD,KAGTgD,OAAQhC,GACNhB,KAAKgB,WAAaA,EAClB,IAAK,IAAIwC,EAAI,EAAGA,EAAIxD,KAAKuD,KAAKhB,OAAQiB,IACpCxD,KAAKuD,KAAKC,GAAGR,OAAOhC,GAIpBX,eACF,OAAOL,KAAKM,UAAUN,KAAKgB,YAGzByC,YACF,OAAOzD,KAAKuD,KAAKG,MAAKC,GAAKA,EAAEvD,IAAM,IAGrCwD,YAAalB,EAAGC,GACd3C,KAAKM,UAAUN,KAAKgB,YAAY0B,EAAIA,EACpC1C,KAAKM,UAAUN,KAAKgB,YAAY2B,EAAIA,SCzBlCkB,cACSC,EAAU/D,GAErBC,KAAKyC,KAAO,CAAEC,EAAGoB,EAASC,YAAY,GAAIpB,EAAGmB,EAASC,YAAY,IAG/CtD,SAASC,eAAe,cAChCsD,MAAMC,WAAaH,EAASI,OAGvC,MAAMC,EAAW1D,SAASC,eAAe,YAsBzC,OArBAyD,EAASH,MAAMvC,MAAQzB,KAAKyC,KAAKC,EAAI,KACrCyB,EAASH,MAAMtC,OAAS1B,KAAKyC,KAAKE,EAAI,KACtCwB,EAASH,MAAMC,WAAaH,EAASG,WAGrCjE,KAAKoE,aAAapE,KAAKyC,MAGvBzC,KAAKgB,WAAa,EAGlBhB,KAAKqE,KAAO,GACZrE,KAAKuD,KAAO,GACZvD,KAAKsE,SAAW,GAChBtE,KAAKkB,KAAK4C,EAASP,KAAMO,EAASxD,UAAWP,YAwHzBwE,GAEtB,MAAMhE,EAAOE,SAAS+D,uBAAuB,OAC7C,IAAK,IAAIhB,EAAI,EAAGA,EAAIjD,EAAKgC,OAAQiB,IAE/BjD,EAAKiD,GAAGiB,iBAAiB,SAAS,WAChC,MAAMC,EAASxC,SAASlC,KAAK2E,WAC7BJ,EAAKvB,OAAO0B,GACZH,EAAKrB,OACL0B,EAAWL,EAAKvD,eAIpB,MAAM6D,EAAMpE,SAAS+D,uBAAuB,OAAO,GACnC/D,SAASC,eAAe,YAChC+D,iBAAiB,SAASK,IAChCD,EAAIb,MAAMe,QAAU,WAELtE,SAASC,eAAe,aAChC+D,iBAAiB,SAASK,IACjCD,EAAIb,MAAMe,QAAU,UA3IpBC,CAAchF,MAGdA,KAAKgD,SACLhD,KAAKkD,OAEElD,KAGTkB,KAAM+D,EAASC,EAAcnF,GAM3BkF,EAAQE,UAERF,EAAQG,SAAQC,IAGd,MAAMC,EAActF,KAAKqE,KAAKgB,EAAOlF,MACrC,GAAImF,EAAa,CAEf,MAAMC,EAAS,IAAI5F,EAAQ2F,EAAaD,EAAQrF,KAAMD,GAEtDuF,EAAY/B,KAAKiC,KAAKD,GAEtBvF,KAAKuD,KAAKiC,KAAKD,OACV,CAIL,MAAMtF,EAAQwF,EAAYJ,EAAOlF,KAAM,GACvCH,KAAKsE,SAASrE,GAASoF,EAAOlF,KAG9B,MAAMuF,EAAS,IAAIpC,EAAW+B,EAAOlF,KAAMF,EAAOiF,EAAaS,KAAIC,GAAMA,EAAGtF,UAAU+E,EAAOlF,OAAS,CAAEuC,EAAG,EAAGC,EAAG,MAC3G4C,EAAS,IAAI5F,EAAQ+F,EAAQL,EAAQrF,KAAMD,GAEjD2F,EAAOnC,KAAKiC,KAAKD,GAEjBvF,KAAKqE,KAAKgB,EAAOlF,MAAQuF,EAEzB1F,KAAKuD,KAAKiC,KAAKD,OAKrBnB,aAAc3B,GACZ,MAAMnB,EAAab,SAASC,eAAe,UAC3CmF,EAAcvE,EAAYmB,GAE1B,MAAMqD,EAAcrF,SAASC,eAAe,SAC5CmF,EAAcC,EAAarD,GAE3BzC,KAAKuB,OAASD,EACdtB,KAAKqB,KAAOC,EAAWyE,WAAW,MAClC/F,KAAKoD,MAAQ0C,EAAYC,WAAW,MAEpCzE,EAAWmD,iBAAiB,cAAc,SAAUuB,GAASA,EAAMC,oBACnE3E,EAAWmD,iBAAiB,aAAa,SAAUuB,GAASA,EAAMC,oBAClE3E,EAAWmD,iBAAiB,YAAY,SAAUuB,GAASA,EAAMC,oBACjE3E,EAAWmD,iBAAiB,eAAe,SAAUuB,GAASA,EAAMC,oBAGtEC,kBAAmBC,GACjB,MACMtE,EADQ7B,KAAKoD,MAAMxB,aAAauE,EAAIzD,EAAGyD,EAAIxD,EAAG,EAAG,GACpCd,KACbuE,GA8FSC,EA9FUxE,EAAK,GA8FZyE,EA9FgBzE,EAAK,GA8FlB0E,EA9FsB1E,EAAK,GA+F3C4D,EAAYY,EAAG,GAAKZ,EAAYa,EAAG,GAAKb,EAAYc,EAAG,QAD7CF,EAAGC,EAAGC,EA3FrB,GAAc,IAFA1E,EAAK,GAGjB2E,QAAQC,IAAI,qBACP,CACL,MAAMC,EAAW1G,KAAKsE,SAAS8B,GACzBxG,EAAMI,KAAKqE,KAAKqC,GACtB,GAAI9G,IAAQA,EAAI6D,MACd,OAAO7D,GAKb+G,kBAAmB/G,GACjB,OAAOA,EAAIU,UAAUN,KAAKgB,YAG5B4F,WAAYhH,EAAK8C,EAAGC,GAClB/C,EAAIgE,YAAYlB,EAAGC,GAEnB3C,KAAKgD,SACLhD,KAAKkD,OAGPF,OAAQ0B,QAEgB,IAAXA,IAA0B1E,KAAKgB,WAAa0D,GAGvD,IAAK,IAAIlB,EAAI,EAAGA,EAAIxD,KAAKqE,KAAK9B,OAAQiB,IAIhCxD,KAAKqE,KAAKb,IACZxD,KAAKqE,KAAKb,GAAGR,OAAOhD,KAAKgB,YAK/BkC,OACElD,KAAKqB,KAAKmB,UAAU,EAAG,EAAGxC,KAAKyC,KAAKC,EAAG1C,KAAKyC,KAAKE,GACjD3C,KAAKoD,MAAMZ,UAAU,EAAG,EAAGxC,KAAKyC,KAAKC,EAAG1C,KAAKyC,KAAKE,GAClD,IAAK,IAAIa,EAAI,EAAGA,EAAIxD,KAAKuD,KAAKhB,OAAQiB,IAChCxD,KAAKuD,KAAKC,IACZxD,KAAKuD,KAAKC,GAAGN,KAAKlD,KAAKqB,KAAMrB,KAAKoD,iBA8BjCwB,EAAY5D,GAEnB,MAAMT,EAAOE,SAAS+D,uBAAuB,OAC7C,IAAK,IAAIhB,EAAI,EAAGA,EAAIjD,EAAKgC,OAAQiB,IAC3BxC,IAAekB,SAAS3B,EAAKiD,GAAGmB,WAClCpE,EAAKiD,GAAGQ,MAAM/D,MAAQ,QAEtBM,EAAKiD,GAAGQ,MAAM/D,MAAQ,gBAKnB4F,EAAetE,EAAQkB,GAC9BlB,EAAOyC,MAAMvC,MAAQgB,EAAKC,EAAI,KAC9BnB,EAAOyC,MAAMtC,OAASe,EAAKE,EAAI,KAC/BpB,EAAOE,MAAQgB,EAAKC,EACpBnB,EAAOG,OAASe,EAAKE,WAOd8C,EAAaoB,EAAGtE,GAGvB,OAFkB,IAAIuE,OAAOvE,EAAS,GAAKsE,EAAEE,SAAS,KAC1BC,MAAM,EAAIzE,SCrMlC0E,cACS1C,GACXvE,KAAKkH,aAAc,EACnBlH,KAAKuE,KAAOA,EACZvE,KAAKmD,OAAS1C,SAASC,eAAe,UACtC,MAAMa,EAASd,SAASC,eAAe,SACvCV,KAAKqB,KAAOE,EAAOwE,WAAW,MAGhCoB,aACE1G,SAASgE,iBAAiB,eAAgBK,GAAM9E,KAAKoH,YAAYtC,KACjErE,SAASgE,iBAAiB,aAAW,KAC/BzE,KAAKkH,cACPzG,SAAS4G,oBAAoB,cAAerH,KAAKkH,aACjDlH,KAAKkH,aAAc,MAKzBE,YAAaE,GACX,MAAMnB,EAAMnG,KAAKuH,YAAYD,GACvB1H,EAAMI,KAAKuE,KAAK2B,kBAAkBC,GACxC,GAAIvG,EAAK,CACP,MAAM4H,EAAYxH,KAAKyH,aAAa7H,EAAKuG,GACzCnG,KAAKkH,YAAepC,GAAM9E,KAAK0H,YAAY5C,EAAGlF,EAAK4H,GACnD/G,SAASgE,iBAAiB,cAAezE,KAAKkH,aAC9CI,EAAErB,kBAINwB,aAAc7H,EAAKuG,GACjB,MAAMwB,EAAiB3H,KAAKuE,KAAKoC,kBAAkB/G,GACnD,MAAO,CACL8C,EAAGiF,EAAejF,EAAIyD,EAAIzD,EAC1BC,EAAGgF,EAAehF,EAAIwD,EAAIxD,GAI9B+E,YAAa5C,EAAGlF,EAAK4H,GACnB,MAAMI,EAAuB5H,KAAKuH,YAAYzC,GACxCpC,EAAI8E,EAAU9E,EAAIkF,EAAqBlF,EACvCC,EAAI6E,EAAU7E,EAAIiF,EAAqBjF,EAE7C3C,KAAKuE,KAAKqC,WAAWhH,EAAK8C,EAAGC,GAE7BmC,EAAEmB,iBAIJsB,YAAaM,GACX,MAAMC,EAAO9H,KAAKmD,OAAO4E,wBACzB,MAAO,CACLrF,EAAGmF,EAAIG,QAAUF,EAAKG,KACtBtF,EAAGkF,EAAIK,QAAUJ,EAAKK,MClD5BC,OAAO3D,iBAAiB,QAAQ,WAE9B,IAAI4D,EAAS,EACb,MAAMC,EAAYC,SAAShF,KAAKhB,OAC1BgC,EAAO,IAAIV,EAAS0E,UAAQ,KAAUF,GAAU,KACtC,IAAIpB,EAAY1C,GACxB4C,aAakB,oBAAfqB,aAETA,WAAajE,GAGf6D,OAAOK,qBAhBEC,IACHL,EAASC,GACX9B,QAAQC,IAAG,WAAY4B,QAAaC,KACpCF,OAAOK,WAAWC,EAAa,MAE/BnE,EAAKrB,SAWsB","sources":["javascript/kissCel.js","javascript/kissObject.js","javascript/kissDoll.js","javascript/dragAndDrop.js","javascript/doll.js"],"sourcesContent":["// A KiSS Cel represents each instance of an image appearing in the\n// doll. It doesn't represent the image file itself. So a single\n// image can appear multiple times in multiple objects as different\n// KiSSCels\nclass KiSSCel {\n  constructor (obj, cel, set, incLoaded) {\n    this.color = obj.color\n    this.name = cel.name\n    this.mark = cel.mark\n    this.fix = cel.fix\n    this.position = obj.positions[0]\n    this.positions = obj.positions\n    this.sets = cel.sets\n    this.image = document.getElementById(cel.name + '-' + cel.palette)\n    this.ghostImage = undefined\n    this.visible = false\n    this.alpha = cel.alpha\n    this.currentSet = 0\n\n    this.offset = cel.offset\n\n    this.init(set)\n\n    // Let Smooch know when image is loaded\n    this.ghostImage.onload = function () {\n      incLoaded()\n    }\n\n    return this\n  }\n\n  init (set) {\n    const drawctxt = set.ctxt\n    const drawcanvas = set.canvas\n    const image = this.image\n\n    // Draw image to ctxt and get image data\n    drawctxt.drawImage(image, 0, 0, image.width, image.height)\n\n    const ghostImageData = drawctxt.getImageData(0, 0, image.width, image.height)\n    const data = ghostImageData.data\n\n    // Fill ghost image data with obj color\n    const color = hexToRgb(this.color)\n    for (let k = 0; k < data.length; k = k + 4) {\n      data[k] = color.red\n      data[k + 1] = color.green\n      data[k + 2] = color.blue\n    }\n\n    // Clear ctxt and draw altered image\n    drawctxt.clearRect(0, 0, set.size.x, set.size.y)\n    drawctxt.putImageData(ghostImageData, 0, 0)\n\n    // Save altered image as cel's ghost image\n    this.ghostImage = new Image()\n    this.ghostImage.src = drawcanvas.toDataURL('image/png')\n\n    // Clear ctxt\n    drawctxt.clearRect(0, 0, set.size.x, set.size.y)\n  }\n\n  update (currentSet) {\n    this.currentSet = currentSet\n    if (this.sets.indexOf(currentSet) === -1) {\n      this.visible = false\n    } else {\n      this.visible = true\n    }\n    this.position = this.positions[currentSet]\n    if (this.name === 'blink') {\n      this.visible = false\n    }\n  }\n\n  draw (screen, ghost) {\n    if (this.visible === true) {\n      if (this.alpha) {\n        screen.globalAlpha = (255 - this.alpha) / 255\n      }\n\n      screen.drawImage(\n        this.image,\n        this.position.x + this.offset.x,\n        this.position.y + this.offset.y\n      )\n\n      screen.globalAlpha = 1\n\n      ghost.drawImage(\n        this.ghostImage,\n        this.position.x + this.offset.x,\n        this.position.y + this.offset.y\n      )\n    }\n  }\n}\n\nfunction hexToRgb (hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  if (result) {\n    return {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    }\n  }\n}\n\nexport { KiSSCel }\n","class KiSSObject {\n  constructor (mark, color, positions) {\n    this.mark = mark\n    this.currentSet = 0\n    this.color = color\n    this.positions = positions\n    this.cels = []\n\n    return this\n  }\n\n  update (currentSet) {\n    this.currentSet = currentSet\n    for (let i = 0; i < this.cels.length; i++) {\n      this.cels[i].update(currentSet)\n    }\n  }\n\n  get position () {\n    return this.positions[this.currentSet]\n  }\n\n  get fixed () {\n    return this.cels.some(c => c.fix > 0)\n  }\n\n  setPosition (x, y) {\n    this.positions[this.currentSet].x = x\n    this.positions[this.currentSet].y = y\n  }\n}\n\nexport { KiSSObject }\n","import { KiSSCel } from './kissCel'\nimport { KiSSObject } from './kissObject'\n\nclass KiSSDoll {\n  constructor (kissData, incLoaded) {\n    // Size of the play area.\n    this.size = { x: kissData.window_size[0], y: kissData.window_size[1] }\n\n    // Set up border area (around the playarea)\n    const borderarea = document.getElementById('borderarea')\n    borderarea.style.background = kissData.border\n\n    // Set up play area\n    const playarea = document.getElementById('playarea')\n    playarea.style.width = this.size.x + 'px'\n    playarea.style.height = this.size.y + 'px'\n    playarea.style.background = kissData.background\n\n    // Set up canvases\n    this.initCanvases(this.size)\n\n    // Initialize current set\n    this.currentSet = 0\n\n    // Initialize objs and cels\n    this.objs = []\n    this.cels = []\n    this.colorids = []\n    this.init(kissData.cels, kissData.positions, incLoaded)\n    initSetClicks(this)\n\n    // Update and draw\n    this.update()\n    this.draw()\n\n    return this\n  }\n\n  init (cnfCels, cnfPositions, incLoaded) {\n    /* Cels have to be kept in a separate list from the objects.\n        This is because objects are the things that get dragged, change\n        position, etc. But cels are the things that are drawn, and they have\n        to be drawn in a certain order to get the right layering effect. */\n\n    cnfCels.reverse()\n\n    cnfCels.forEach(cnfCel => {\n      // Objects are indexed by their \"mark\". This is what groups cels together.\n      // First check if there's already an object with that mark.\n      const existingObj = this.objs[cnfCel.mark]\n      if (existingObj) {\n        // If object already exists, create a cel that points to that object.\n        const newCel = new KiSSCel(existingObj, cnfCel, this, incLoaded)\n        // Add the new cel to the object's list of cels.\n        existingObj.cels.push(newCel)\n        // Add the new cel to the doll's list of cels.\n        this.cels.push(newCel)\n      } else {\n        // If the object doesn't already exist, we need to create it.\n\n        // Create a color to identify the object.\n        const color = numberToHex(cnfCel.mark, 6)\n        this.colorids[color] = cnfCel.mark\n\n        // Create the new object and new cel\n        const newObj = new KiSSObject(cnfCel.mark, color, cnfPositions.map(sp => sp.positions[cnfCel.mark] || { x: 0, y: 0 }))\n        const newCel = new KiSSCel(newObj, cnfCel, this, incLoaded)\n        // Add the new cel to the object's list of cels.\n        newObj.cels.push(newCel)\n        // Add the object to the doll's list of objects.\n        this.objs[cnfCel.mark] = newObj\n        // Add the cel to the doll's list of cels.\n        this.cels.push(newCel)\n      }\n    })\n  }\n\n  initCanvases (size) {\n    const drawcanvas = document.getElementById('screen')\n    setCanvasSize(drawcanvas, size)\n\n    const ghostcanvas = document.getElementById('ghost')\n    setCanvasSize(ghostcanvas, size)\n\n    this.canvas = drawcanvas\n    this.ctxt = drawcanvas.getContext('2d')\n    this.ghost = ghostcanvas.getContext('2d')\n\n    drawcanvas.addEventListener('touchstart', function (event) { event.preventDefault() })\n    drawcanvas.addEventListener('touchmove', function (event) { event.preventDefault() })\n    drawcanvas.addEventListener('touchend', function (event) { event.preventDefault() })\n    drawcanvas.addEventListener('touchcancel', function (event) { event.preventDefault() })\n  }\n\n  getSelectedObject (pos) {\n    const pixel = this.ghost.getImageData(pos.x, pos.y, 1, 1)\n    const data = pixel.data\n    const colorid = rgbToHex(data[0], data[1], data[2])\n    const alpha = data[3]\n\n    if (alpha === 0) {\n      console.log('not draggable')\n    } else {\n      const objIndex = this.colorids[colorid]\n      const obj = this.objs[objIndex]\n      if (obj && !obj.fixed) {\n        return obj\n      }\n    }\n  }\n\n  getObjectPosition (obj) {\n    return obj.positions[this.currentSet]\n  }\n\n  moveObject (obj, x, y) {\n    obj.setPosition(x, y)\n\n    this.update()\n    this.draw()\n  }\n\n  update (newSet) {\n    // Update current set if new set is given\n    if (typeof newSet !== 'undefined') { this.currentSet = newSet }\n\n    // Update cels\n    for (let i = 0; i < this.objs.length; i++) {\n      // have to check if object exists first, because we are using\n      // the object id (\"mark\") as the index for the array, so\n      // many indexes are skipped.\n      if (this.objs[i]) {\n        this.objs[i].update(this.currentSet)\n      }\n    }\n  }\n\n  draw () {\n    this.ctxt.clearRect(0, 0, this.size.x, this.size.y)\n    this.ghost.clearRect(0, 0, this.size.x, this.size.y)\n    for (let i = 0; i < this.cels.length; i++) {\n      if (this.cels[i]) {\n        this.cels[i].draw(this.ctxt, this.ghost)\n      }\n    }\n  }\n}\n\nfunction initSetClicks (doll) {\n  // Add click events to set numbers\n  const sets = document.getElementsByClassName('set')\n  for (let i = 0; i < sets.length; i++) {\n    // when a number is clicked, update doll to new set\n    sets[i].addEventListener('click', function () {\n      const newSet = parseInt(this.innerHTML)\n      doll.update(newSet)\n      doll.draw()\n      updateSets(doll.currentSet)\n    })\n  }\n\n  const tip = document.getElementsByClassName('tip')[0]\n  const openTip = document.getElementById('open-tip')\n  openTip.addEventListener('click', e => {\n    tip.style.display = 'block'\n  })\n  const closeTip = document.getElementById('close-tip')\n  closeTip.addEventListener('click', e => {\n    tip.style.display = 'none'\n  })\n}\n\nfunction updateSets (currentSet) {\n  // Update set listing to highlight current set\n  const sets = document.getElementsByClassName('set')\n  for (let i = 0; i < sets.length; i++) {\n    if (currentSet === parseInt(sets[i].innerHTML)) {\n      sets[i].style.color = 'black'\n    } else {\n      sets[i].style.color = 'grey'\n    }\n  }\n}\n\nfunction setCanvasSize (canvas, size) {\n  canvas.style.width = size.x + 'px'\n  canvas.style.height = size.y + 'px'\n  canvas.width = size.x\n  canvas.height = size.y\n}\n\nfunction rgbToHex (r, g, b) {\n  return numberToHex(r, 2) + numberToHex(g, 2) + numberToHex(b, 2)\n}\n\nfunction numberToHex (n, length) {\n  const paddedHex = '0'.repeat(length - 1) + n.toString(16)\n  const shortened = paddedHex.slice(0 - length)\n  return shortened\n}\n\nexport { KiSSDoll }\n","class DragAndDrop {\n  constructor (doll) {\n    this.dragHandler = false\n    this.doll = doll\n    this.screen = document.getElementById('screen')\n    const canvas = document.getElementById('ghost')\n    this.ctxt = canvas.getContext('2d')\n  }\n\n  initialize () {\n    document.addEventListener('pointerdown', (e) => this.onMouseDown(e))\n    document.addEventListener('pointerup', () => {\n      if (this.dragHandler) {\n        document.removeEventListener('pointermove', this.dragHandler)\n        this.dragHandler = false\n      }\n    })\n  }\n\n  onMouseDown (e) {\n    const pos = this.getMousePos(e)\n    const obj = this.doll.getSelectedObject(pos)\n    if (obj) {\n      const dragStart = this.getDragStart(obj, pos)\n      this.dragHandler = (e) => this.onMouseMove(e, obj, dragStart)\n      document.addEventListener('pointermove', this.dragHandler)\n      e.preventDefault()\n    }\n  }\n\n  getDragStart (obj, pos) {\n    const objectPosition = this.doll.getObjectPosition(obj)\n    return {\n      x: objectPosition.x - pos.x,\n      y: objectPosition.y - pos.y\n    }\n  }\n\n  onMouseMove (e, obj, dragStart) {\n    const currentMousePosition = this.getMousePos(e)\n    const x = dragStart.x + currentMousePosition.x\n    const y = dragStart.y + currentMousePosition.y\n\n    this.doll.moveObject(obj, x, y)\n\n    e.preventDefault()\n  }\n\n  // from http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n  getMousePos (evt) {\n    const rect = this.screen.getBoundingClientRect()\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    }\n  }\n}\n\nexport { DragAndDrop }\n","import { KiSSDoll } from './kissDoll'\nimport { DragAndDrop } from './dragAndDrop'\n\nwindow.addEventListener('load', function () {\n  /* globals kissJson, globalKiss */\n  let loaded = 0\n  const totalCels = kissJson.cels.length\n  const doll = new KiSSDoll(kissJson, () => { loaded += 1 })\n  const dragger = new DragAndDrop(doll)\n  dragger.initialize()\n\n  function checkLoaded () {\n    if (loaded < totalCels) {\n      console.log(`loading ${loaded} of ${totalCels}`)\n      window.setTimeout(checkLoaded, 500)\n    } else {\n      doll.draw()\n    }\n  }\n\n  // in testing and development, it's convenient to have access to\n  // to the kiss set object\n  if (typeof globalKiss !== 'undefined') {\n    // eslint-disable-next-line no-global-assign\n    globalKiss = doll\n  }\n\n  window.setTimeout(checkLoaded, 500)\n})\n"],"names":["$408c8ad1415e81f5$export$fc4b60b88d5c7598","obj","cel","set","incLoaded","this","color","name","mark","fix","position","positions","sets","image","document","getElementById","palette","ghostImage","undefined","visible","alpha","currentSet","offset","init","onload","drawctxt","ctxt","drawcanvas","canvas","drawImage","width","height","ghostImageData","getImageData","data","hex","result","exec","red","parseInt","green","blue","$408c8ad1415e81f5$var$hexToRgb","k","length","clearRect","size","x","y","putImageData","Image","src","toDataURL","update","indexOf","draw","screen","ghost","globalAlpha","$97a32725bdcbdade$export$c76ef8c1aa23eb5b","cels","i","fixed","some","c","setPosition","$de33a9e1dc3a7b3f$export$92944dc530d5048e","kissData","window_size","style","background","border","playarea","initCanvases","objs","colorids","doll","getElementsByClassName","addEventListener","newSet","innerHTML","$de33a9e1dc3a7b3f$var$updateSets","tip","e","display","$de33a9e1dc3a7b3f$var$initSetClicks","cnfCels","cnfPositions","reverse","forEach","cnfCel","existingObj","newCel","push","$de33a9e1dc3a7b3f$var$numberToHex","newObj","map","sp","$de33a9e1dc3a7b3f$var$setCanvasSize","ghostcanvas","getContext","event","preventDefault","getSelectedObject","pos","colorid","r","g","b","console","log","objIndex","getObjectPosition","moveObject","n","repeat","toString","slice","$27caf59c010f4ca5$export$a4c936d95bae1613","dragHandler","initialize","onMouseDown","removeEventListener","e1","getMousePos","dragStart","getDragStart","onMouseMove","objectPosition","currentMousePosition","evt","rect","getBoundingClientRect","clientX","left","clientY","top","window","loaded","totalCels","kissJson","globalKiss","setTimeout","checkLoaded"],"version":3,"file":"doll.js.map"}